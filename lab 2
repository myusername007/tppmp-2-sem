import Foundation // DONE

struct Point {
    var x: Double
    var y: Double
}

extension Point {
    func distance(to other: Point) -> Double {
        let dx = other.x - x
        let dy = other.y - y
        return sqrt(dx * dx + dy * dy)
    }
}

struct Vector {
    var dx: Double
    var dy: Double
    
    init(start: Point, end: Point) {
        self.dx = end.x - start.x
        self.dy = end.y - start.y
    }
    
    init(dx: Double, dy: Double) {
        self.dx = dx
        self.dy = dy
    }
    
    var magnitude: Double {
        return sqrt(dx * dx + dy * dy)
    }
    
    func dot(with other: Vector) -> Double {
        return self.dx * other.dx + self.dy * other.dy
    }
    
    func angle(with other: Vector) -> Double {
        let m = self.magnitude * other.magnitude
        return m == 0 ? 0 : acos(self.dot(with: other) / m)
    }
    
    static func zero() -> Vector {
        return Vector(dx: 0, dy: 0)
    }
}

class Figure {
    static var count = 0
    var points: [Point]
    var name: String?
    
    init(points: [Point], name: String? = nil) {
        self.points = points
        self.name = name
        Figure.count += 1
    }
    
    var area: Double { return 0 }
    var perimeter: Double { return 0 }
    
    deinit {
        Figure.count -= 1
    }
}

class UnknownFigure: Figure { }

class Line: Figure {
    var start: Point { points[0] }
    var end: Point { points[1] }
    
    var vector: Vector {
        return Vector(start: start, end: end)
    }
    
    override var perimeter: Double {
        return start.distance(to: end)
    }
    
    override var area: Double { return 0 }
}

class Triangle: Figure {
    override var perimeter: Double {
        return points[0].distance(to: points[1]) +
               points[1].distance(to: points[2]) +
               points[2].distance(to: points[0])
    }
    
    override var area: Double {
        let p = perimeter / 2
        let a = points[0].distance(to: points[1])
        let b = points[1].distance(to: points[2])
        let c = points[2].distance(to: points[0])
        return sqrt(p * (p - a) * (p - b) * (p - c))
    }
}

class Quadrilateral: Figure {
    override var perimeter: Double {
        var per = 0.0
        for i in 0..<4 {
            per += points[i].distance(to: points[(i + 1) % 4])
        }
        return per
    }
    
    override var area: Double {
        let sum1 = points[0].x * points[1].y +
                   points[1].x * points[2].y +
                   points[2].x * points[3].y +
                   points[3].x * points[0].y
        let sum2 = points[0].y * points[1].x +
                   points[1].y * points[2].x +
                   points[2].y * points[3].x +
                   points[3].y * points[0].x
        return abs(sum1 - sum2) / 2
    }
}

class Rhombus: Quadrilateral { }
class Rectangle: Quadrilateral { }
class Square: Rectangle { }

protocol MathematicsDelegate: AnyObject {
    func didFindFigureRepresentation(_ representation: String)
}

class Mathematics {
    var figures: [Figure] = []
    var resultClosure: ((String, String, String, String) -> Void)?
    weak var delegate: MathematicsDelegate?
    
    init() { }
    
    init(figures: [Figure], resultClosure: ((String, String, String, String) -> Void)? = nil) {
        self.figures = figures
        self.resultClosure = resultClosure
    }
    
    subscript(index: Int) -> Figure {
        get { figures[index] }
        set { figures[index] = newValue }
    }
    
    func add(_ figure: Figure) {
        figures.append(figure)
    }
    
    var maxAreaFigure: Figure? {
        return figures.max(by: { $0.area < $1.area })
    }
    var minAreaFigure: Figure? {
        return figures.min(by: { $0.area < $1.area })
    }
    var maxPerimeterFigure: Figure? {
        return figures.max(by: { $0.perimeter < $1.perimeter })
    }
    var minPerimeterFigure: Figure? {
        return figures.min(by: { $0.perimeter < $1.perimeter })
    }
    
    static func totalArea(of figures: [Figure]) -> Double {
        return figures.reduce(0, { $0 + $1.area })
    }
    
    func findFigureRepresentations(using closure: ((String, String, String, String) -> Void)? = nil) {
        let resultHandler = closure ?? self.resultClosure
        DispatchQueue.global().async {
            let descriptions = self.figures.map { $0.description() }
            let longest = descriptions.max(by: { $0.count < $1.count }) ?? ""
            let shortest = descriptions.min(by: { $0.count < $1.count }) ?? ""
            let largest = descriptions.max() ?? ""
            let smallest = descriptions.min() ?? ""
            
            DispatchQueue.main.async {
                resultHandler?(longest, shortest, largest, smallest)
                self.delegate?.didFindFigureRepresentation(longest)
            }
        }
    }
}

extension Figure {
    func description() -> String {
        return "\(name ?? "Figure") with \(points.count) points, perimeter: \(perimeter), area: \(area)"
    }
}

class FigureDelegate: MathematicsDelegate {
    func didFindFigureRepresentation(_ representation: String) {
        print("Delegate received string representation: \(representation)")
    }
}

let p1 = Point(x: 0, y: 0)
let p2 = Point(x: 3, y: 0)
let p3 = Point(x: 3, y: 4)
let p4 = Point(x: 0, y: 4)

let line = Line(points: [p1, p2], name: "Line")
let triangle = Triangle(points: [p1, p2, p3], name: "Triangle")
let quadrilateral = Quadrilateral(points: [p1, p2, p3, p4], name: "Quadrilateral")

let math = Mathematics()
math.add(line)
math.add(triangle)
math.add(quadrilateral)

print("Figures:")
for fig in math.figures {
    print(fig.description())
}

if let maxArea = math.maxAreaFigure {
    print("Max area: \(maxArea.description())")
}
if let minArea = math.minAreaFigure {
    print("Min area: \(minArea.description())")
}
if let maxPerimeter = math.maxPerimeterFigure {
    print("Max perimeter: \(maxPerimeter.description())")
}
if let minPerimeter = math.minPerimeterFigure {
    print("Min perimeter: \(minPerimeter.description())")
}
print("Total area of all figures: \(Mathematics.totalArea(of: math.figures))")

let delegate = FigureDelegate()
math.delegate = delegate

math.findFigureRepresentations { longest, shortest, largest, smallest in
    print("\nAsynchronous result:")
    print("Longest representation: \(longest)")
    print("Shortest representation: \(shortest)")
    print("Largest lexicographically: \(largest)")
    print("Smallest lexicographically: \(smallest)")
}
